import Head from 'next/head'
import { useCreateStream, useStream, Player } from '@livepeer/react';
import { useMemo, useState, useEffect } from 'react';
import { useMutation, QueryClient, QueryClientProvider } from '@tanstack/react-query';

import {
  CreateSignedPlaybackBody,
  CreateSignedPlaybackResponse,
} from '../pages/api/JWT';

export default function Home() {

  const [ streamName, setStreamName ] = useState<string>( '' );
  const { mutate: createStream, data: createdStream, status } = useCreateStream( streamName ? {
    name: streamName,
    playbackPolicy: { type: 'jwt' },
  } : null );
  

  const { data: stream } = useStream( {
    streamId: createdStream?.id,
    refetchInterval: (stream) => (!stream?.isActive ? 5000 : false)
  } )

 const { mutate: createJwt, data: createdJwt } = useMutation({
   mutationFn: async () => {
     if (!stream?.playbackId) {
       throw new Error('No playback ID yet.');
     }

     //  const isLoading = useMemo(() => status === 'loading', [status]);

     const body: CreateSignedPlaybackBody = {
       playbackId: stream.playbackId,
       // we pass along a "secret key" to demonstrate how gating can work
       secret: 'supersecretkey',
     };

     const response = await fetch('/api/JWT', {
       method: 'POST',
       headers: {
         'Content-Type': 'application/json',
       },
       body: JSON.stringify(body),
     });

     return response.json() as Promise<CreateSignedPlaybackResponse>;
   },
 });

  useEffect(() => {
    if (stream?.playbackId) {
      // when we have a playbackId for the stream, create a JWT
      createJwt();
    }
  }, [stream?.playbackId, createJwt]);

  return (
    <>
      <Head>
        <title>Token Gating Demo</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main>
        <div className='flex justify-center mt-[200px]'>
          <h1 className='text-zinc-400 text-3xl'>Token Gating Demo</h1>
        </div>
        {!stream?.id ? (
          <>
            <div className='flex justify-center mt-[100px]'>
              <label htmlFor=''>StreamName: </label>
              <input
                type='text'
                className=' rounded-full '
                onChange={(e) => setStreamName(e.target.value)}
              />
            </div>
            <div className='flex flex-row justify-center mt-[100px]'>
              <button
                className='flex flex-col border border-orange-200 bg-amber-600 rounded-full px-3 py-2 mr-5'
                onClick={() => {
                  createStream?.();
                }}
                // disabled={isLoading || !createStream || Boolean(stream)}
              >
                Create Gated Stream
              </button>
            </div>
          </>
        ) : (
          <div className='flex justify-center w-1/3'>
              <Player
                title={stream?.name}
                playbackId={stream?.playbackId}
                autoPlay
                muted
                jwt={(createdJwt as CreateSignedPlaybackResponse)?.token}
              />
          </div>
        )}
      </main>
    </>
  );
}
